//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TiffinMgmtSystem.Models
{
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;

    public partial class UserDetail
    {
        public UserDetail()
        {
            this.OrderDetails = new HashSet<OrderDetail>();
            this.TiffinDetails = new HashSet<TiffinDetail>();
        }

        public int UserId { get; set; }

        [Display(Name = "First Name")]
        [Required(ErrorMessage = "First name cannot be empty")]
        [RegularExpression("^([a-zA-Z]+)$", ErrorMessage = "First name contains only alphabets")]
        public string FirstName { get; set; }

        [Display(Name = "Last Name")]
        [Required(ErrorMessage = "Last name cannot be empty")]
        [RegularExpression("^([a-zA-Z]+)$", ErrorMessage = "Last name contains only alphabets")]
        public string LastName { get; set; }

        [Required(ErrorMessage = "Please select a gender")]
        public int GenderId { get; set; }

        [Display(Name = "Phone")]
        [Required(ErrorMessage = "Phone cannot be empty")]
        [RegularExpression(@"^\(?([0-9]{3})\)?([0-9]{3})?([0-9]{4})$", ErrorMessage = "Phone contains only numbers and 10 digits")]
        public string PhoneNo { get; set; }

        [Required(ErrorMessage = "Email cannot be empty")]
        [DataType(DataType.EmailAddress, ErrorMessage = "Invalid email address")]
        [RegularExpression(@"^([\w-\.]+@([\w-]+\.)+[\w-]{2,4})?$", ErrorMessage = "Email address should be in the format abc@abc.test.com")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password cannot be empty")]
        [DataType(DataType.Password, ErrorMessage = "Invalid password")]
        [RegularExpression("^(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).{8,16}$", ErrorMessage = "Password contains one special character, one uppercase, one lowercase, minimum 8 and maximum 16 characters")]
        public string Password { get; set; }

        public int UserTypeId { get; set; }
        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        public System.DateTime Date { get; set; }

        public virtual Gender Gender { get; set; }

        public virtual ICollection<OrderDetail> OrderDetails { get; set; }

        public virtual ICollection<TiffinDetail> TiffinDetails { get; set; }

        public virtual UserType UserType { get; set; }
    }
}
